#!/bin/bash
#
# SPDX-License-Identifier: GPL-2.0
#
# Copyright (C) 2019 Western Digital Corporation or its affiliates.
#

function exit_failed()
{
	echo "$1"
	exit 1
}

function zonefs_mkfs()
{
	IFS=' ';
	read -r -a args <<< "$1"

	mkzonefs -f "${args[@]}" || \
		exit_failed " --> mkzonefs FAILED"
}

function zonefs_mount()
{
	IFS=' ';
	read -r -a args <<< "$1"

	mount -t zonefs "${args[@]}" "$zonefs_mntdir" || \
		exit_failed " --> mount FAILED"
}

function zonefs_mount_err()
{
	IFS=' ';
	read -r -a args <<< "$1"

	mount -t zonefs "${args[@]}" "$zonefs_mntdir" && \
		exit_failed " --> mount SUCCESS (should FAIL)"
}

function zonefs_umount()
{
	umount "$zonefs_mntdir" || \
		exit_failed " --> umount FAILED"
}

function check_perm()
{
	if [ -d "$zonefs_mntdir/cnv/" ]; then
		list=$(stat -c "%n %a" "$zonefs_mntdir"/cnv/[0-9]*)
		while read -r line; do

			fp=(${line})
			f=$(basename "${fp[0]}")
			perm=${fp[1]}

			if [ "$perm" != "$1" ]; then
				echo "cnv file $f: invalid permission $perm (expected $1)"
				exit 1
			fi

		done <<< "$list"
	fi

	list=$(stat -c "%n %a" "$zonefs_mntdir"/seq/[0-9]*)
	while read -r line; do

		fp=(${line})
		f=$(basename "${fp[0]}")
		perm=${fp[1]}

		if [ "$perm" != "$1" ]; then
			echo "seq file $f: invalid permission $perm (expected $1)"
			exit 1
		fi

	done <<< "$list"
}

function check_uid_gid()
{
	if [ -d "$zonefs_mntdir/cnv/" ]; then
		list=$(stat -c "%n %u %g" "$zonefs_mntdir"/cnv/[0-9]*)
		while read -r line; do

			fug=(${line})
			f=$(basename "${fug[0]}")
			uid=${fug[1]}
			gid=${fug[2]}

			if [ "$uid" != "$1" ]; then
				echo "cnv file $f: invalid UID $uid (expected $1)"
				exit 1
			fi
			if [ "$gid" != "$2" ]; then
				echo "cnv file $f: invalid GID $gid (expected $2)"
				exit 1
			fi

		done <<< "$list"
	fi

	list=$(stat -c "%n %u %g" "$zonefs_mntdir"/seq/[0-9]*)
	while read -r line; do

		fug=(${line})
		f=$(basename "${fug[0]}")
		uid=${fug[1]}
		gid=${fug[2]}

		if [ "$uid" != "$1" ]; then
			echo "seq file $f: invalid UID $uid (expected $1)"
			exit 1
		fi
		if [ "$gid" != "$2" ]; then
			echo "seq file $f: invalid GID $gid (expected $2)"
			exit 1
		fi

	done <<< "$list"
}

function file_size()
{
	stat -c "%s" "$1"
}

function check_size()
{
	aggr_cnv=$1

	if [ -d "$zonefs_mntdir/cnv/" ]; then
		if $aggr_cnv; then
			expected_sz=$(( zone_bytes * (nr_cnv_zones - 1) ))
		else
			expected_sz=$zone_bytes
		fi

		list=$(stat -c "%n %s" "$zonefs_mntdir"/cnv/[0-9]*)
		while read -r line; do

			fsz=(${line})
			f=$(basename "${fsz[0]}")
			sz=${fsz[1]}

			if [ "$sz" != "$expected_sz" ]; then
				echo "cnv file $f: invalid size $sz B (expected $expected_sz B)"
				exit 1
			fi

		done <<< "$list"
	fi

	list=$(stat -c "%n %s" "$zonefs_mntdir"/seq/[0-9]*)
	while read -r line; do

		fsz=(${line})
		f=$(basename "${fsz[0]}")
		sz=${fsz[1]}

		if [ "$sz" != "0" ]; then
			echo "seq file $f: invalid size $sz B (expected 0 B)"
			exit 1
		fi

	done <<< "$list"
}

function create_nullb()
{
	local n=0

	modprobe null_blk

	while [ 1 ]; do
		if [ ! -b "/dev/nullb$n" ]; then
			break
		fi
		n=$(( n + 1 ))
	done

	mkdir /sys/kernel/config/nullb/nullb$n
	echo 1 > /sys/kernel/config/nullb/nullb$n/power

	echo "$n"
}

function destroy_nullb()
{
        local n=$1

	echo 0 > /sys/kernel/config/nullb/nullb$n/power
	rmdir /sys/kernel/config/nullb/nullb$n

	rmmod null_blk >> /dev/null 2>&1
}
